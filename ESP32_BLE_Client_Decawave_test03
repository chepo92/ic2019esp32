/*
   Program to operate ESP32 in client mode and use fitness band as proximity switch
   Program by: Aswinth Raj B
   Dated: 31-10-2018
   Website: www.circuitdigest.com
   Reference: https://github.com/nkolban/esp32-snippets
   //NOTE: The My_BLE_Address, serviceUUID and charUUID should be changed based on the BLe server you are using
*/

#include <BLEDevice.h> //Header file for BLE 

static BLEUUID serviceUUID("680c21d9-c946-4c1f-9c11-baa1c21329e7"); //Service UUID of fitnessband obtained through nRF connect application
//static BLEUUID    charUUID("80f9d8bc-3bff-45bb-a181-2d6a37991208"); //Characteristic  UUID of fitnessband obtained through nRF connect application
//static BLEUUID    charUUID("a02b947e-df97-4516-996a-1882521e0ead"); //Characteristic  UUID of fitnessband obtained through nRF connect application
static BLEUUID    charUUID("0eb2bc59-baf1-4c1c-8535-8a0204c69de5"); //Characteristic  UUID of fitnessband obtained through nRF connect application

String My_BLE_Address = "c7:69:d1:f4:79:4e"; //Hardware Bluetooth MAC of my fitnessband, will vary for every band obtained through nRF connect application
static BLERemoteCharacteristic* pRemoteCharacteristic;
static std::map<std::string, BLERemoteCharacteristic*>* pRemoteCharacteristics;

BLEScan* pBLEScan; //Name the scanning device as pBLEScan
BLEScanResults foundDevices;

static BLEAddress *Server_BLE_Address;
String Scaned_BLE_Address;

boolean paired = false; //boolean variable to togge light



bool connectToserver (BLEAddress pAddress) {

  BLEClient*  pClient  = BLEDevice::createClient();
  Serial.println(" - Created client");

  // Connect to the BLE Server.
  pClient->connect(pAddress);
  Serial.println(" - Connected to fitnessband");

  // Obtain a reference to the service we are after in the remote BLE server.
  BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
  if (pRemoteService != nullptr)
  {
    Serial.println(" - Found our service");
    return true;
  }
  else
    return false;

  // Get all characteristics of the service
  pRemoteCharacteristics = pRemoteService->getCharacteristics();
  if (pRemoteCharacteristics != nullptr) {
    Serial.println("List of characteristics advertised by the server)");
    std::map<std::string, BLERemoteCharacteristic*>::iterator it = pRemoteCharacteristics->begin();
    while (it != pRemoteCharacteristics->end()) {
      std::string charValue = it->first;
      Serial.print(" - Service Value: "); Serial.println(charValue.c_str());
    }
  }

  // Obtain a reference to the characteristic in the service of the remote BLE server.
  pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
  if (pRemoteCharacteristic != nullptr) {
    Serial.println(" - Found our characteristic");
    std::string myValue = pRemoteCharacteristic->readValue();
    Serial.print(" - Service Value: "); Serial.println(myValue.c_str());
    return true;
  }
}

class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks
{
    void onResult(BLEAdvertisedDevice advertisedDevice) {
      Serial.printf("Scan Result: %s \n", advertisedDevice.toString().c_str());
      Server_BLE_Address = new BLEAddress(advertisedDevice.getAddress());

      Scaned_BLE_Address = Server_BLE_Address->toString().c_str();

    }
};

void setup() {
  Serial.begin(115200); //Start serial monitor
  Serial.println("ESP32 BLE Server program"); //Intro message

  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan(); //create new scan
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks()); //Call the class that is defined above
  pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster
}

void loop() {

  foundDevices = pBLEScan->start(3); //Scan for 3 seconds to find the Fitness band

  while (foundDevices.getCount() >= 1)
  {
    if (Scaned_BLE_Address == My_BLE_Address && paired == false)
    {
      Serial.println("Found Device :-)... connecting to Server as client");
      if (connectToserver(*Server_BLE_Address))
      {
        paired = true;
        Serial.println("********************LED turned ON************************");
        digitalWrite(BUILTIN_LED, LOW);
        break;
      }
      else
      {
        Serial.println("Pairing failed");
        break;
      }
    }

    if (Scaned_BLE_Address == My_BLE_Address && paired == true)
    {
      Serial.println("Our device went out of range");
      paired = false;
      Serial.println("********************LED OOOFFFFF************************");
      digitalWrite(BUILTIN_LED, HIGH);
      ESP.restart();
      break;
    }
    else
    {
      Serial.println("We have some other BLe device in range");
      break;
    }
  }
}
